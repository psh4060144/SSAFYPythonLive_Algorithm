# APS(Algorithm Problem Solving) 기본 학습
# 입출력을 제외한 내장함수 사용하지 않기.
# 기본적인 내장함수의 동작원리 이해.
# 보다 좋은 알고리즘을 이해하고 활용하는 것이 목표.



# 알고리즘: 유한한 단계를 통해 문제를 해결하기 위한 절차나 방법. 어떠한 문제를 해결하기 위한 절차.
# 주로 컴퓨터 용어로 쓰이며, 컴퓨터가 어떤 일을 수행하기 위한 단계적 방법.
# 주어진 문제를 해결하기 위해 여러 개의 다양한 알고리즘이 가능. -> 어떤 알고리즘을 사용해야 하는가?
# 많은 문제에서 성능 분석의 기준으로 알고리즘의 작업량을 비교. 따라서, 알고리즘의 성능 분석이 필요.



# 시간복잡도
# 알고리즘의 작업량을 표현할 때 쓰는 표현. 실제로 걸리는 시간을 측정하거나, 실행되는 명령문의 갯수를 계산. 대략 10억번의 연산에 1초가 소모됨.
# but, Big-O Notation(빅 오 표기법)으로 표시하는 것이 가장 일반적.
# 시간 복잡도 함수 중에서 가장 큰 영향력을 주는 n에 대한 항만을 표시. 최고차항만, 계수를 제거하여 표시.
# 전체적인 양의 추세만 보는 방법이기 때문에 아주 정확하게 횟수를 알 수는 없지만, 실행되는 횟수가 많다면 거의 신뢰할 수 있음.



# 좋은 알고리즘
# 정확성: 얼마나 정확하게 동작하는가?   # 알고리즘에서 가장 중요한 부분.
# 작업량: 얼마나 적은 연산으로 원하는 결과를 얻어내는가?
# 메모리 사용량: 얼마나 적은 메모리를 사용하는가?
# 단순성: 얼마나 단순한가?
# 최적성: 더 이상 개선할 여지 없이 최적화 되었는가?



# 배열(Array): 자료 구조의 하나.
# 일정한 자료형의 변수들을 하나의 이름으로 열거하여 사용하는 자료구조.
# 여러 개의 변수를 사용해야 하는 경우, 이를 list로 바꾸어서 사용하는 방법 등이 있음.
# 프로그램 내에서 여러 개의 변수가 필요할 때, 일일이 다른 변수명을 이용하여 자료에 접근하는 것은 매우 비효율적.
# but 배열을 사용하면 하나의 선언을 통해 둘 이상의 변수를 선언할 수 있음.
# 단순히 다수의 변수 선언을 의미하는 것이 아니라, 다수의 변수로는 하기 힘든 작업을 배열을 활용해 쉽게 할 수 있음.



def BubbleSort(a, N): 	# 정렬할 List, N 원소 수
    for i in range(N-1, 0, -1):  # 범위의 끝 위치
        for j in range(i):		 # 비교할 왼쪽 원소 인덱스 j
            if a[j] > a[j+1]:
                a[j], a[j+1] = a[j+1], a[j] 
