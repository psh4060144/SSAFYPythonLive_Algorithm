# stack 응용 - 계산기
# 문자열로 된 계산식이 주어질 때, 스택을 이용하여 계산식의 값을 계산할 수 있음.
# 방법: 1. 중위 표기법의 수식을 후위 표기법으로 변경한다(stack 을 이용해서). 2. 후위 표기법의 수식을 stack 을 이용해서 계산한다.

# 모르겠음... 수업이 안들렸음...

# 백트래킹
# 해를 찾는 도중에 막히면(즉, 해가 아니라면) 되돌아가서 다시 해를 찾아가는 기법. DFS 와 비슷해 보이지만, 조금 다름.
# 뭐가 다르냐? 백트래킹은 최적화 문제와 결정 문제를 해결할 수 있음.

# 결정 문제: 문제의 조건을 만족하는 해가 존재하는지 여부를 yes 또는 no 로 답할 수 있는 문제.

# 백트래킹과 DFS 의 차이
# 어떤 node 에서 출발하는 경로가 해결책으로 이어질 것 같지 않으면 더 이상 그 경로를 따라가지 않음으로써 시도의 횟수를 줄임. (Prunning, 가지치기)
# DFS 가 모든 경로를 추적하는데 비해 백트래킹은 불필요한 경로를 조기에 차단.
# DFS 를 하기에는 경우의 수가 너무 많은 경우, 즉 N! 가지의 경우의 수를 가진 문제에 DFS 를 적용하면 당연히 처리가 불가능.
# 백트래킹 알고리즘을 적용하면 일반적으로 경우의 수가 줄어들지만, 이 여기 최악의 경우에는 여전히 지수함수 시간(Exponential Time) 을 요구하므로 처리가 힘듦.
# 백트래킹은 모든 후보를 검사하지 않음!

# 백트래킹
# 어떤 node 의 유망성을 점검한 후에 유망(promising)하지 않다고 결정되면 그 node 의 부모로 되돌아가(backtracking) 다음 자식 node 로 감.
