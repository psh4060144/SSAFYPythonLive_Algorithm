# 모든 부분집합의 모양을 확인하기 위해(카운트 배열의 형태를 확인하기 위해) 숫자의 비트를 볼 수 있다.

# 그렇다면, 숫자의 자리 비트를 확인할 방법은? => 비트 연산자를 활용한다.

# &: 비교하는 양쪽의 비트가 둘 다 1이면 1. ex) 5 & 3 = 101(2) & 011(2) = 001(2) = 1

# 그래서, 숫자의 비트 모양을 어떻게 확인할건데?

# ex) 3 = 011(2)

# if 3 & 1 != 0:  # 다른 건 다 0인데 0번 비트가 0이 아니면, 즉 0번 비트가 1이라면
#     print(0번요소)
#
# if 3 & 2 != 0:  # 다른 건 다 0인데 1번 비트가 0이 아니면, 즉 1번 비트가 1이라면
#     print(1번요소)
#
# if 3 & 4 != 0:  # 다른 건 다 0인데 2번 비트가 0이 아니면, 즉 2번 비트가 1이라면
#     print(2번요소)

# 이걸 다 손으로 쓰고 있을 수 없으니, <<와 >>을 이용한다.

# 숫자를 0부터 7까지 숫자의 비트 확인하기
arr = ['a', 'b', 'c']
N = len(arr)

for i in range(1 << N):  # == for i in range(2**N):. 2 ** N == 1 << N
    # i의 비트 모양 확인하기: 각 비트에 001, 010, 100 &연산
    for j in range(N):
        if i & (1 << j):  # i & 001, i & 010, i & 100.
            print(arr[j], end = ',')
    print()