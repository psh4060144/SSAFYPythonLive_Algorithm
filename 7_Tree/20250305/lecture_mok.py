# 이진 트리: 최대 차수가 2인 트리
### 차수: 하나의 노드에 달린 자식 노드의 갯수
### 최대 차수: 모든 노드의 차수 중 가장 큰 값
# 모든 노드가 가득 차 있는 이진 트리: 포화 이진 트리.
# 다 차 있진 않지만, 중간에 빈 번호가 없는 이진 트리: 완전 이진 트리.

# 포화 이진 트리의 노드 갯수: 2 ** (h + 1) - 1
# 포화 이진 트리의 해당 높이에서의 노드 갯수: 2 ** h
# 완전 이진 트리에서의 특징: 부모 노드 번호 * 2 = 왼쪽 자식 노드 번호 | 부모 노드 번호 * 2 + 1 = 오른쪽 자식 노드 번호

# 이진 트리를 저장하는 가장 손쉬운 방법은 배열을 사용하는 것이다.
# stack, queue 를 사용했던 것처럼!

# 포화 이진 트리에 번호를 매기는 방식으로 적용을 한다.
# root node : 1
# 왼쪽 자식 : 부모 노드 * 2
# 오른쪽 자식 : 부모 노드 * 2 + 1

h = 2  # 배열 높이
v = 2 ** (h + 1)  # 최대 노드 갯수 제작. 왜 -1을 하지 않느냐? node 는 1부터 시작이니까 어차피 tree 만들 때 +1을 해 줘야 한다...
tree = [None] * v

tree[1] = 'S'
tree[2] = 'S'
tree[3] = 'A'
tree[4] = 'F'
tree[5] = 'Y'
tree[6] = '!'
tree[7] = '!'

print(tree)

# 노드 번호가 무작위인 포화 이진 트리에서 간선을 저장하는 방법
tree_value = [None] * v

tree_value[5] = 'S'
tree_value[1] = 'S'
tree_value[2] = 'A'
tree_value[3] = 'F'
tree_value[7] = 'Y'
tree_value[6] = '!'
tree_value[4] = '!'

# 1. 인접 list 형태로 저장 가능.
edge = [[] for _ in range(v)]
tree[5] = [1, 2]
tree[1] = [3, 7]
tree[2] = [6, 4]

# 2. 부모 번호를 index 로 왼쪽 자식과 오른쪽 자식을 저장 가능.
left = [None] * v
right = [None] * v
left[5] = 1
right[5] = 2
left[1] = 3
right[1] = 7
left[2] = 6
right[2] = 4

# 3. 자식 번호를 index 로 부모를 저장 가능.
parent = [None] * v
parent[1] = 5
parent[2] = 5
parent[3] = 1
parent[7] = 1
parent[6] = 2
parent[4] = 2







# 질문

### 근데, N이 6인 완전 이진 트리는 6번 노드가 7번 노드로 취급되어도 완전 이진 트리가 아닌가...?
### 01.png 처럼 7번 노드는 하나만 있으니까, 즉 좌우의 개념이 없으니까 완전 이진 트리가 되는 것이 아닌가...?
# 아니다! 왜냐? 7번 노드는 좌우의 개념이 없어도, 완전 이진 트리는 좌우, 즉 왼쪽 자식과 오른쪽 자식의 구분이 있다.
# 따라서, 7번 노드가 오른쪽 자식이라면 완전 이진 트리가 아니다!
# 마찬가지로, 노드 번호가 6번이더라도 이 노드가 오른쪽 자식이라면 완전 이진 트리가 아니다!
# 그럼 뭐냐? 그냥 이진 트리다~

### 노드 번호가 다르면 못 쓴다고 했는데, 우리가 노드 번호를 새로 부여해서 사용할 수 없나? 어차피 번호 자체가 우리가 매기는 거니까. 02.png 처럼.
# 근데 그러면 부여한 번호에 따라 노드 번호를 새로 찾아 내려 가야 한다. 그러니까, 일을 두 번 해야하고 두 번 헷갈려야 한다.
# 그럴거면 그냥, 하던 대로 index 번호와 간선 정보를 그대로 저장하자.

### 노드 갯수를 보고, 최대 노드 길이를 정하는 건가? 아님 그냥 정하는건가?
### 그러니까, 만 개를 미리 만들어서 사용하는가, 아님 숫자 갯수 세서 그거 들어가는 길이의 포화 이진 트리를 만드는 건가?
# 그럴 필요도 없고, 그냥 노드 갯수 딱 맞게 만들면 된다. 왜냐? 이진 트리니까.
# 내가 헷갈렸던 건 포화 이진 트리의 list 를 생각하고 있었던 거였고, 어차피 전부 다 이진 트리이긴 하니까 그냥 노드 갯수 맞게 만들어서 추가하면 된다.